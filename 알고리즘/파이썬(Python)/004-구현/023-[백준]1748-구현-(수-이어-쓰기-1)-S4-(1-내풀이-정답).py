# [백준]1748-구현-(수-이어-쓰기-1)-S4-(1-내풀이-정답).py
# https://github.com/irishNoah/Algorithm-Study
# https://www.acmicpc.net/problem/1748
'''
*** 문제
1부터 N까지의 수를 이어서 쓰면 다음과 같이 새로운 하나의 수를 얻을 수 있다.
>>> 1234567891011121314151617181920212223...

이렇게 만들어진 새로운 수는 몇 자리 수일까? 이 수의 자릿수를 구하는 프로그램을 작성하시오.

*** 시간 : 0.5초 (기본 1초) / 메모리 : 128MB (기본 128MB)
> 딱 문제만 보면, 걍 어떤 변수에 for문으로 1부터 주어진 수까지 str(i)를 더해서
결과를 출력하면 되지 않나라는 생각으로 하면 답은 구할 수 있다. >>> 하지만, 시간 초과 판정 나겄지
> 따라서, 어떤 규칙을 발견해야 한다!
>>> 규칙
> 일의 자리 개수 : 9개 (1~9)
- 일의 자리 개수를 더하면? 9*1 = 9
> 십의 자리 개수 : 90개 (10~99)
- 십의 자리 개수를 더하면? 90*2 = 180
> 백의 자리 개수 : 900개 (100~999)
- 백의 자리 개수를 더하면? 900*3 = 2700

>>> 따라서
- n의 자리 개수 = 9*pow(10, n의 자리-1)*n의 자리
> 그러면, 1부터 1423까지의 합은 어떻게 더할까?
- 1의 자리 개수 + 10의 자리 개수 + 100의 자리 개수를 모두 더한다.
- 그리고 424개(1000~1423) * 1000 을 더해주면 된다!!!


*** 조건
첫째 줄에 N(1 ≤ N ≤ 100,000,000)이 주어진다.

*** 설계 [18분 소요] / 총 풀이 시간[총 23분 소요]
위에서 세운 규칙대로 하면 된다!

'''
#============================================================

import sys

def solution(num):
    answer = 0

    for i in range(1, len(str(num))):
        leng = 9*pow(10, i-1)*i
        answer += leng

    cha = num - pow(10,int(len(str(num))-1)) + 1
    answer += cha * len(str(num))


    return answer

#============================================================

num = int(input()) # 120
print(solution(num)) # 252