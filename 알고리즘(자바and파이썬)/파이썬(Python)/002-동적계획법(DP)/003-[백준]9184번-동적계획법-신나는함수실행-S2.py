# [백준]9184번-동적계획법-신나는함수실행-S2
# https://github.com/irishNoah/Algorithm-Study
# https://www.acmicpc.net/problem/9184

def w(a, b, c):

    # 조건 1
    if a <= 0 or b <= 0 or c <= 0:
        return 1
    
    # 조건 2
    if a > 20 or b > 20 or c > 20:
        return w(20, 20, 20)
    
    # 조건 3 > 기존의 table[a][b][c] 값이 이미 있다면, 굳이 계산하는 것이 시간 낭비이므로 리턴한다.
    # 참고로, 이게 없는 상태에서 제출할 경우 시간 초과 판정이 난다.
    if table[a][b][c]:
        return table[a][b][c]
    
    # 조건 4
    if a < b and b < c :
        table[a][b][c] = w(a, b, c-1) + w(a, b-1, c-1) - w(a, b-1, c)
        return table[a][b][c]
    
    # 위 3가지 조건에 해당되지 않는 경우
    table[a][b][c] = w(a-1, b, c) + w(a-1, b-1, c) + w(a-1, b, c-1) - w(a-1, b-1, c-1)
    return table[a][b][c]

# 3차원 리스트 변수 table >>> 동적계획법으로 문제를 풀기 위함
table = [[[0]*21 for _ in range(21)] for _ in range(21)]

# 프로그램 종료 조건이 입력될 때까지 출력
while True:
    a, b, c = map(int, input().split())

    # 프로그램 종료 조건
    if a == -1 and b == -1 and c == -1:
        break

    print(f'w({a}, {b}, {c}) = {w(a,b,c)}')

'''
풀이 느낀점

1. dp라는 것을 파악했다. 이 점은 매우 잘한 것 같다.
2. 피보나치 문제에서의 재귀함수에서도 파악할 수 있었듯이,
특정 피보나치의 값을 재귀함수로 푸는 것을,
동적계획법에서는 리스트로 할당했다.
3. 이처럼 이 문제에서도 정의 함수에서 구한 것을 특정 리스트에 할당해서 해결하면 되는 부분이었다.
4. 나도 리스트로 해결하면 되는 것을 생각했지만, 각 a&b&c에 대한 값을 어케 구하지라는 생각을 하게 되어서
문제를 못 풀게 되었다.
5. 하지만, 이러한 경우 각 변수의 개수에 맞게 n차원 리스트를 생성해서 풀면 된다.
- 만약 변수의 개수가 3개라면, 리스트를 3개 생성하는 것이 아니라 3차원 리스트를 생성해야 하는 것이다!!!
6. 이것을 몰랐기 때문에 다른 사람이 푼 코드를 참조해서 문제를 해결했지만, 그래도
이 문제가 DP와 관한 문제였던 점, 그리고 리스트로 접근해야 했던 점을 생각한 것이 기특하다.

'''