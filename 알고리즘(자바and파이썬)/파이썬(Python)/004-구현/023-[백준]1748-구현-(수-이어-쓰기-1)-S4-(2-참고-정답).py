# [백준]1748-구현-(수-이어-쓰기-1)-S4-(2-참고-정답).py
# https://github.com/irishNoah/Algorithm-Study
# https://www.acmicpc.net/problem/1748

'''
*** 참고 URL
https://soopeach.tistory.com/6


*** 시간 : 0.5초 (기본 1초) / 메모리 : 128MB (기본 128MB)

*** 조건
- N(1 ≤ N ≤ 100,000,000)

*** 설계 [총 -분 소요] / 총 풀이 시간[총 -분 소요]


'''
#============================================================

#설명 예시는 x=120으로 입력값을 지정해주겠습니다.
# 입력 받은 문자열의 길이를 먼저 파악한 후 길이 - 1만큼의 자릿수까지는 먼저 계산을 해줍니다.
#예를 들어 세 자릿수 이면 한 자릿수, 두 자릿수는 미리 계산을 하고 세 자릿수는 따로 계산을 해줍니다.
import sys
x = sys.stdin.readline().rstrip() #x = '120'/len(x)는 3 (120)
ans = 0

# 한 자릿수는 1 ~ 9, 두 자릿수는 10 ~ 99, 세 자릿수는 100 ~ 999
# 한 자릿수를 모두 더하면 99가지 * 자릿수(1)), 두 자릿수를 모두 더하면 180(90가지 * 자릿수(2)) 
# 세 자릿수를 모두 더하면 2700가지(900가지 * 자릿수(3)와 같이 규칙을 발견할 수 있습니다.
# 한 자릿수와 두 자릿수를 먼저 계산해줍니다.
for i in range(1, len(x)):
    # 9 * 자릿수(1) i가 1인경우
    # 90 * 자릿수(2) i가 2인경우
    # 한 자릿수, 두 자릿수를 모두 더한 값을 ans에 더하여 줍니다.
    ans += int('9' + (i - 1) * '0') * i

# 한 자릿수, 두 자릿수의 계산은 미리해주었으므로
# 100 부터 120 까지(세 자릿수)의 계산을 해주면 됩니다.
# 100 부터 120 까지 갯수에 * 자릿수(3)
ans += (int(x) - 10 ** (len(x) - 1) + 1) * len(x)
print(ans)